// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RPD_API.Models;

#nullable disable

namespace RPD_API.Migrations
{
    [DbContext(typeof(rpdDbContext))]
    [Migration("20250917075326_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RPD_API.Models.Abilities", b =>
                {
                    b.Property<Guid>("abID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("abDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("abEffect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("abName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("abID");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("RPD_API.Models.EffortValues", b =>
                {
                    b.Property<Guid>("evID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("eValues")
                        .HasColumnType("int");

                    b.Property<string>("evStatName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("pokeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("evID");

                    b.HasIndex("pokeID");

                    b.ToTable("EffortValues");
                });

            modelBuilder.Entity("RPD_API.Models.EggGroup", b =>
                {
                    b.Property<Guid>("egID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("egName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("egID");

                    b.ToTable("EggGroup");
                });

            modelBuilder.Entity("RPD_API.Models.EvolutionChart", b =>
                {
                    b.Property<Guid>("pokeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("prePokeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("evoCondition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("evoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("pokeID", "prePokeID");

                    b.HasIndex("prePokeID");

                    b.ToTable("EvolutionChart");
                });

            modelBuilder.Entity("RPD_API.Models.GameVersion", b =>
                {
                    b.Property<Guid>("gvID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("gvGen")
                        .HasColumnType("int");

                    b.Property<string>("gvName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("gvID");

                    b.ToTable("GameVersion");
                });

            modelBuilder.Entity("RPD_API.Models.GrowthRate", b =>
                {
                    b.Property<Guid>("growthRateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("grName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("grTotalExp")
                        .HasColumnType("float");

                    b.HasKey("growthRateID");

                    b.ToTable("GrowthRate");
                });

            modelBuilder.Entity("RPD_API.Models.ImageLink", b =>
                {
                    b.Property<Guid>("imgID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("imgLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("pokeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("imgID");

                    b.HasIndex("pokeID");

                    b.ToTable("ImageLink");
                });

            modelBuilder.Entity("RPD_API.Models.Move", b =>
                {
                    b.Property<Guid>("moveID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("moveAccuracy")
                        .HasColumnType("float");

                    b.Property<string>("moveDamageClass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("moveDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("moveName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("movePP")
                        .HasColumnType("int");

                    b.Property<int>("movePower")
                        .HasColumnType("int");

                    b.Property<int>("movePriority")
                        .HasColumnType("int");

                    b.Property<Guid>("typeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("moveID");

                    b.HasIndex("typeID");

                    b.ToTable("Move");
                });

            modelBuilder.Entity("RPD_API.Models.PokemonAbilities", b =>
                {
                    b.Property<Guid>("pokeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("abID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("paHiddenCheck")
                        .HasColumnType("bit");

                    b.HasKey("pokeID", "abID");

                    b.HasIndex("abID");

                    b.ToTable("PokemonAbilities");
                });

            modelBuilder.Entity("RPD_API.Models.PokemonEggGroup", b =>
                {
                    b.Property<Guid>("pokeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("egID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("pokeID", "egID");

                    b.HasIndex("egID");

                    b.ToTable("PokemonEggGroup");
                });

            modelBuilder.Entity("RPD_API.Models.PokemonGameVersion", b =>
                {
                    b.Property<Guid>("pokeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("gvID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("pgvDexNumber")
                        .HasColumnType("int");

                    b.Property<string>("pgvEntries")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("pokeID", "gvID");

                    b.HasIndex("gvID");

                    b.ToTable("PokemonGameVersion");
                });

            modelBuilder.Entity("RPD_API.Models.PokemonMove", b =>
                {
                    b.Property<Guid>("pokeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("moveID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("pmLearnLevel")
                        .HasColumnType("int");

                    b.Property<string>("pmLearnMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("pokeID", "moveID");

                    b.HasIndex("moveID");

                    b.ToTable("PokemonMove");
                });

            modelBuilder.Entity("RPD_API.Models.Pokemons", b =>
                {
                    b.Property<Guid>("pokeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("growthRateID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("pokeBaseExp")
                        .HasColumnType("int");

                    b.Property<int>("pokeBaseFriendship")
                        .HasColumnType("int");

                    b.Property<double>("pokeCatchRate")
                        .HasColumnType("float");

                    b.Property<string>("pokeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("pokeEggCycles")
                        .HasColumnType("int");

                    b.Property<double>("pokeFemaleRate")
                        .HasColumnType("float");

                    b.Property<decimal>("pokeHeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("pokeMaleRate")
                        .HasColumnType("float");

                    b.Property<string>("pokeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("pokeNationalNumber")
                        .HasColumnType("int");

                    b.Property<string>("pokeSpecies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("pokeState")
                        .HasColumnType("int");

                    b.Property<decimal>("pokeWidth")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("pokeID");

                    b.HasIndex("growthRateID");

                    b.ToTable("Pokemons");
                });

            modelBuilder.Entity("RPD_API.Models.PokemonStats", b =>
                {
                    b.Property<Guid>("pokeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("stID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Basevalue")
                        .HasColumnType("int");

                    b.Property<int>("MaxValue")
                        .HasColumnType("int");

                    b.Property<int>("minValue")
                        .HasColumnType("int");

                    b.HasKey("pokeID", "stID");

                    b.HasIndex("stID");

                    b.ToTable("PokemonStats");
                });

            modelBuilder.Entity("RPD_API.Models.PokemonType", b =>
                {
                    b.Property<Guid>("pokeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("typeID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("pokeID", "typeID");

                    b.HasIndex("typeID");

                    b.ToTable("PokemonType");
                });

            modelBuilder.Entity("RPD_API.Models.StatType", b =>
                {
                    b.Property<Guid>("stID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("stName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("stID");

                    b.ToTable("StatType");
                });

            modelBuilder.Entity("RPD_API.Models.Type", b =>
                {
                    b.Property<Guid>("typeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("typeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("typeID");

                    b.ToTable("Type");
                });

            modelBuilder.Entity("RPD_API.Models.EffortValues", b =>
                {
                    b.HasOne("RPD_API.Models.Pokemons", "Pokemons")
                        .WithMany("EffortValues")
                        .HasForeignKey("pokeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pokemons");
                });

            modelBuilder.Entity("RPD_API.Models.EvolutionChart", b =>
                {
                    b.HasOne("RPD_API.Models.Pokemons", "Pokemons")
                        .WithMany("EvolutionChart")
                        .HasForeignKey("pokeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RPD_API.Models.Pokemons", "PrePokemons")
                        .WithMany("PreEvolutionChart")
                        .HasForeignKey("prePokeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Pokemons");

                    b.Navigation("PrePokemons");
                });

            modelBuilder.Entity("RPD_API.Models.ImageLink", b =>
                {
                    b.HasOne("RPD_API.Models.Pokemons", "Pokemons")
                        .WithMany("ImageLink")
                        .HasForeignKey("pokeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pokemons");
                });

            modelBuilder.Entity("RPD_API.Models.Move", b =>
                {
                    b.HasOne("RPD_API.Models.Type", "Type")
                        .WithMany("Move")
                        .HasForeignKey("typeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("RPD_API.Models.PokemonAbilities", b =>
                {
                    b.HasOne("RPD_API.Models.Abilities", "Abilities")
                        .WithMany("PokemonAbilities")
                        .HasForeignKey("abID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPD_API.Models.Pokemons", "Pokemons")
                        .WithMany("PokemonAbilities")
                        .HasForeignKey("pokeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Abilities");

                    b.Navigation("Pokemons");
                });

            modelBuilder.Entity("RPD_API.Models.PokemonEggGroup", b =>
                {
                    b.HasOne("RPD_API.Models.EggGroup", "EggGroup")
                        .WithMany("PokemonEggGroup")
                        .HasForeignKey("egID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPD_API.Models.Pokemons", "Pokemons")
                        .WithMany("PokemonEggGroup")
                        .HasForeignKey("pokeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EggGroup");

                    b.Navigation("Pokemons");
                });

            modelBuilder.Entity("RPD_API.Models.PokemonGameVersion", b =>
                {
                    b.HasOne("RPD_API.Models.GameVersion", "GameVersion")
                        .WithMany("PokemonGameVersion")
                        .HasForeignKey("gvID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPD_API.Models.Pokemons", "Pokemons")
                        .WithMany("PokemonGameVersion")
                        .HasForeignKey("pokeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameVersion");

                    b.Navigation("Pokemons");
                });

            modelBuilder.Entity("RPD_API.Models.PokemonMove", b =>
                {
                    b.HasOne("RPD_API.Models.Move", "Move")
                        .WithMany("PokemonMove")
                        .HasForeignKey("moveID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPD_API.Models.Pokemons", "Pokemons")
                        .WithMany("PokemonMove")
                        .HasForeignKey("pokeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Move");

                    b.Navigation("Pokemons");
                });

            modelBuilder.Entity("RPD_API.Models.Pokemons", b =>
                {
                    b.HasOne("RPD_API.Models.GrowthRate", "GrowthRate")
                        .WithMany("Pokemons")
                        .HasForeignKey("growthRateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GrowthRate");
                });

            modelBuilder.Entity("RPD_API.Models.PokemonStats", b =>
                {
                    b.HasOne("RPD_API.Models.Pokemons", "Pokemons")
                        .WithMany("PokemonStats")
                        .HasForeignKey("pokeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPD_API.Models.StatType", "StatType")
                        .WithMany("PokemonStats")
                        .HasForeignKey("stID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pokemons");

                    b.Navigation("StatType");
                });

            modelBuilder.Entity("RPD_API.Models.PokemonType", b =>
                {
                    b.HasOne("RPD_API.Models.Pokemons", "Pokemons")
                        .WithMany("PokemonType")
                        .HasForeignKey("pokeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RPD_API.Models.Type", "Type")
                        .WithMany("PokemonType")
                        .HasForeignKey("typeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pokemons");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("RPD_API.Models.Abilities", b =>
                {
                    b.Navigation("PokemonAbilities");
                });

            modelBuilder.Entity("RPD_API.Models.EggGroup", b =>
                {
                    b.Navigation("PokemonEggGroup");
                });

            modelBuilder.Entity("RPD_API.Models.GameVersion", b =>
                {
                    b.Navigation("PokemonGameVersion");
                });

            modelBuilder.Entity("RPD_API.Models.GrowthRate", b =>
                {
                    b.Navigation("Pokemons");
                });

            modelBuilder.Entity("RPD_API.Models.Move", b =>
                {
                    b.Navigation("PokemonMove");
                });

            modelBuilder.Entity("RPD_API.Models.Pokemons", b =>
                {
                    b.Navigation("EffortValues");

                    b.Navigation("EvolutionChart");

                    b.Navigation("ImageLink");

                    b.Navigation("PokemonAbilities");

                    b.Navigation("PokemonEggGroup");

                    b.Navigation("PokemonGameVersion");

                    b.Navigation("PokemonMove");

                    b.Navigation("PokemonStats");

                    b.Navigation("PokemonType");

                    b.Navigation("PreEvolutionChart");
                });

            modelBuilder.Entity("RPD_API.Models.StatType", b =>
                {
                    b.Navigation("PokemonStats");
                });

            modelBuilder.Entity("RPD_API.Models.Type", b =>
                {
                    b.Navigation("Move");

                    b.Navigation("PokemonType");
                });
#pragma warning restore 612, 618
        }
    }
}
